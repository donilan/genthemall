<% 
import static com.ii2d.dbase.util.DNameUtils.toPascalName
import static com.ii2d.dbase.util.DNameUtils.toCamelName
import static com.ii2d.dbase.util.DDBUtils.TYPES
import static com.ii2d.dbase.util.DDBUtils.DB_TYPE_MAP
import static com.ii2d.genthemall.util.Functions.*

def unlistableColumns = ['Id', 'OldId', 'RecentLoginIp', 'RecentLoginTime', 'LastLoginIp', 'LastLoginTime', 'Address', 'Password', 'IdCard']
def uneditableColumns = ['Id', 'OldId', 'RecentLoginIp', 'RecentLoginTime', 'LastLoginIp', 'LastLoginTime', 'CreateDate']
def datetimeColumnTypes = ['TIMESTAMP']

def gVals(_key, _default, isScript=false) {
	if(isScript) {
		def _result = choiceOne(global?.get(table)?.get(_key), global?.get(_key))
		if(_result)
			return "${_key} = \"${_result}\""
		return "${_key} = ${_default}"
	} else {
		return "${_key} = \"${choiceOne(global?.get(table)?.get(_key), global?.get(_key), _default)}\""
	}
}

%>
${gVals("packageName", "com.ii2d")}
${gVals('name', toPascalName(table))}
${gVals('tableName', table)}
${gVals("packagePath", "packageName.replaceAll(/\\./, '/')", true)}
${gVals("pascalName", "name", true)}
${gVals("camelName", "name[0].toLowerCase()+name[1..-1]", true)}
${gVals("modelClassName", "packageName + '.model.' + pascalName", true)}

columns 	= 
[ <% attrs.each { p-> %>
	[
		name 		: "${toPascalName(p.name)}",
		pascalName 	: "${toPascalName(p.name)}",
		camelName 	: "${toCamelName(p.name)}",
		columnName 	: "${p.name}",
		columnType 	: "${TYPES[p.columnType]}",
		classType 	: "${DB_TYPE_MAP[p.className]? DB_TYPE_MAP[p.className]: p.className}",
		maxLength 	: ${p.length},
		getter		: "get${toPascalName(p.name)}",
		setter		: "set${toPascalName(p.name)}",
		isShow 		: ${!p.name.equalsIgnoreCase('id')},
		isListable 	: ${!unlistableColumns.contains(toPascalName(p.name))},
		isNullable 	: ${p.nullable},
		isEditable	: ${!uneditableColumns.contains(toPascalName(p.name))},
		isId 		: ${p.name?.equalsIgnoreCase('id')},
		isEmail 	: ${p.name?.equalsIgnoreCase('email')},
		isUrl 		: ${p.name?.equalsIgnoreCase('url')},
		isPassword 	: ${p.name?.equalsIgnoreCase('password')},
		isPhone 	: ${p.name.equalsIgnoreCase('phone')},
		isTelephone	: ${p.name.equalsIgnoreCase('telephone')},
		isStatus	: ${p.name.equalsIgnoreCase('status')},
		isDeleted	: ${p.name.equalsIgnoreCase('deleted')},
	],<%}%>
]
idColumn 			= columns.find{it.isId}
statusColumn		= columns.find{it.isStatus}
deletedColumn		= columns.find{it.isDeleted}
columnWithoutId 	= columns.findAll{!it.isId}
allColumns			= fartherTable? columns + fartherTable.columns: columns
allColumnsWithoutId = allColumns.findAll{!it.isId}
defaultSuperModelClass = 'com.ii2d.mybatis.model.BaseMyBatisModel'
	