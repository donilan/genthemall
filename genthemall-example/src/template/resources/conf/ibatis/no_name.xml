<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<%
def toPropertyNamesStr = { _propertyNames ->
	_propertyNames.toString()[1..-2]
}

def toPropertyAndColumnStr = { _properties ->
	def _propertyAndColumnStr = ""
	_properties.each {
		_propertyAndColumnStr += """#${it.name}:${it.columnTypeName}#, """
	}
	return _propertyAndColumnStr[0..-3];
}

propertyNamesStr = toPropertyNamesStr(source.getProperties()*.columnName)
propertyNamesWithoutIdStr = toPropertyNamesStr(source.getProperties().findAll{it.name != 'id'}*.columnName)

def idProperty = source.getProperties().find{it.name == 'id'}

def propertyAndColumnStr = toPropertyAndColumnStr(source.getProperties())
def propertyAndColumnWithoutIdStr = toPropertyAndColumnStr(source.getProperties().findAll{it.name != 'id'})

propertyAndColumnStr = propertyAndColumnStr[0..-3]

//result map
def resultMapStr = ""
source.getProperties().each {
	resultMapStr += """\t\t<result property="${it.name}" column="${it.columnName}"/>\n"""
}
resultMapStr = resultMapStr[0..-2]

//select
def selectStr = ""
source.getProperties().each {
	selectStr += """
		<isPropertyAvailable property="${it.name}">
			<isNotNull prepend="AND" property="${it.name}">( ${it.columnName} = #${it.name}:${it.columnTypeName}# )</isNotNull>
		</isPropertyAvailable>
		<isPropertyAvailable property="smap.${it.name}Like">
			<isNotNull prepend="AND" property="smap.${it.name}Like">( ${it.columnName} LIKE '%\$smap.${it.name}Like\$%' )</isNotNull>
		</isPropertyAvailable>"""
}
selectStr += """
		<isPropertyAvailable property="extraCondition">
			<isNotNull prepend="AND" property="extraCondition">( \$extraCondition\$ )</isNotNull>
		</isPropertyAvailable>"""
		
// update
def updateStr = ""
source.getProperties().each {
	updateStr += """
		<isPropertyAvailable property="${it.name}">
			<isNotNull prepend="," property="${it.name}">${it.columnName} = #${it.name}:${it.columnTypeName}#</isNotNull>
		</isPropertyAvailable>"""
}
%>

<sqlMap namespace="${source.name}">
	<!-- ${source.name} resultMap -->
	<resultMap id="${source.lowerCaseFirstName}" class="com.createw.model.${source.name}">
${resultMapStr}
	</resultMap>

	<!-- ${source.name} select -->
	<select id="${source.lowerCaseFirstName}_select" resultMap="${source.lowerCaseFirstName}">
		SELECT ${propertyNamesStr} FROM ${source.table}
		<dynamic prepend="WHERE">
${selectStr}
		</dynamic>
		<isPropertyAvailable property="extraOrderColumns">
			<isNotNull property="extraOrderColumns">ORDER BY \$extraOrderColumns\$</isNotNull>
		</isPropertyAvailable>
	</select>
	
	<!-- ${source.name} select count -->
	<select id="${source.lowerCaseFirstName}_select_count" resultClass="java.lang.Long">
		SELECT COUNT(*) FROM ${source.table}
		<dynamic prepend="WHERE">
${selectStr}
		</dynamic>
	</select>
	
	<!-- ${source.name} update -->
	<update id="${source.lowerCaseFirstName}_update">
		UPDATE ${source.table}
    	<dynamic prepend="SET">
${updateStr}
    	</dynamic>
    	WHERE ${idProperty.columnName}=#${idProperty.name}:${idProperty.columnTypeName}#
    </update>
    
    <!-- ${source.name} insert -->
    <insert id="${source.lowerCaseFirstName}_insert">
    	INSERT INTO ${source.table} (${idProperty.columnName}, ${propertyNamesWithoutIdStr}) VALUES (SEQ_${source.table}.Nextval, ${propertyAndColumnWithoutIdStr})
    	<selectKey resultClass="java.lang.Long" keyProperty="${idProperty.name}">
    		SELECT SEQ_${source.table}.Currval FROM DUAL
    	</selectKey>
  	</insert>
  	
  	<!-- ${source.name} delete -->
  	<delete id="${source.lowerCaseFirstName}_delete">DELETE FROM ${source.table} WHERE 
	    <dynamic prepend=" ">
${selectStr}
	    </dynamic>
    </delete>
</sqlMap>