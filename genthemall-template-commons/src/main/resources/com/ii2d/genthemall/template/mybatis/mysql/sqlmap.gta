<%/*
name="sqlmap-mysql"
type="resources"
iterateKey="tables"
description="Mysql mybatis sqlmap template"
path="mybatis/mysql/__CAMEL_NAME__.xml"
version="0.4.0"
*/%>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<%
def insertColumnsStr = (columnWithoutId*.columnName).toString()[1..-2]
def insertColumnValuesStr = (columnWithoutId*.camelName?.collect {"#{${it}}\n\t\t\t"}).toString()[1..-2]
%>
<mapper namespace="${packageName}.model">

	<!-- result map for ${packageName}.${pascalName} -->
	<resultMap type="${modelClassName}" id="${camelName}">
	<%columns.each {%><result column="${it.columnName}" property="${it.camelName}" javaType="${it.classType}"/>
	<%}%></resultMap>
	
<% if(idColumn) { //!-- generate if have id column. %>
	<!-- select by id sql -->
	<select id="select_by_id_${pascalName}" useCache="true" resultMap="${camelName}" >
		SELECT * FROM ${tableName} WHERE ${idColumn.columnName} = #{value}
	</select>
<% }%>
	<select id="select_${pascalName}" resultMap="${camelName}" >
		SELECT * FROM ${tableName}
		<trim prefix="WHERE" prefixOverrides="OR|AND">
			<%columnWithoutId.each { %>
			<if test="orEq.${it.camelName} != null">OR ${it.columnName} = #{orEq.${it.camelName}}</if>
			<if test="orLike.${it.camelName} != null">OR ${it.columnName} LIKE concat('%', #{orLike.${it.camelName}}, '%')</if>
			<if test="andEq.${it.camelName} != null">AND ${it.columnName} = #{andEq.${it.camelName}}</if>
			<if test="andLike.${it.camelName} != null">AND ${it.columnName} LIKE concat('%', #{andLike.${it.camelName}}, '%')</if>
			<%}%>
			<%if(statusColumn) {%>
			<if test="andEq.${statusColumn.camelName} == null">AND ${statusColumn.columnName} > -1</if>
			<%}%>
		</trim>
		<choose>
			<when test="limitStartRow gt -1 and limitEndRow gt 0" >
				LIMIT #{limitStartRow}, #{limitEndRow}
			</when>
			<when test="orderBy.size gt 0">
				ORDER BY 
				<trim suffixOverrides=",">
					<foreach collection="orderBy" item="it">\${it}, </foreach>
				</trim>
			</when>
		</choose>
	</select>
	<!-- Count table. -->
	<select id="count_${pascalName}" resultType="java.lang.Long">
		SELECT COUNT(1) FROM ${tableName}
		<trim prefix="WHERE" prefixOverrides="OR|AND">
			<%columnWithoutId.each { %>
			<if test="orEq.${it.camelName} != null">OR ${it.columnName} = #{orEq.${it.camelName}}</if>
			<if test="orLike.${it.camelName} != null">OR ${it.columnName} LIKE concat('%', #{orLike.${it.camelName}}, '%')</if>
			<if test="andEq.${it.camelName} != null">AND ${it.columnName} = #{andEq.${it.camelName}}</if>
			<if test="andLike.${it.camelName} != null">AND ${it.columnName} LIKE concat('%', #{andLike.${it.camelName}}, '%')</if>
			<%}%>
			AND ${if(deletedColumn) deletedColumn.columnName +" = false"}
		</trim>
	</select>
	
	<insert id="insert_${pascalName}" parameterType="${modelClassName}">
		INSERT INTO ${tableName} (${insertColumnsStr})
		VALUES (${insertColumnValuesStr})
		<% if(idColumn) { //!-- generate if have id column. %>
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="${idColumn.columnName}">
			SELECT LAST_INSERT_ID()
		</selectKey><%}%>
	</insert>

<% if(idColumn) { //!-- generate if have id column. %>
	<update id="update_${pascalName}" parameterType="${modelClassName}">
		UPDATE ${tableName} SET
		<trim prefixOverrides=",">
			<%columnWithoutId.each {%>
			<if test="${it.camelName} != null">, ${it.columnName} = #{${it.camelName}}</if><%}%>
		</trim>
		WHERE ${idColumn.columnName} = #{${idColumn.camelName}}
	</update>
<%}%>	
<% if(idColumn) { //!-- generate if have id column. %>
	<delete id="delete_${pascalName}" >
	<%if(statusColumn) {%>
		UPDATE ${tableName} SET ${statusColumn.columnName} = -1
	<%} else {%>
		DELETE FROM ${tableName} WHERE ${idColumn.columnName} = #{${idColumn.camelName}}
	<%}%>
	</delete>
<%}%>
</mapper>